#lang scheme

(define (make-tree entry left right)
  (list entry left right))

(define (left-branch tree)
        (cadr tree))
  
(define (entry tree)
        (car tree))
      
(define (right-branch tree)
        (caddr tree))

(define (tree->list tree)
  (define (copy-to-list tree result-list)
    (if (null? tree)
        result-list
        (copy-to-list (left-branch tree)
                      (cons (entry tree)
                            (copy-to-list (right-branch tree)
                                          result-list)))))
  (copy-to-list tree '()))

(define (list->tree elements)
  (car (partial-tree elements (length elements))))

(define (partial-tree elts n)
  (if (= n 0)
      (cons '() elts)
      (let ((left-size (quotient (- n 1) 2)))
        (let ((left-result (partial-tree elts left-size)))
          (let ((left-tree (car left-result))
                (non-left-elts (cdr left-result))
                (right-size (- n (+ left-size 1))))
            (let ((this-entry (car non-left-elts))
                  (right-result (partial-tree (cdr non-left-elts) right-size)))
              (let ((right-tree (car right-result))
                    (remaining-elts (cdr right-result)))
                (cons (make-tree this-entry left-tree right-tree)
                      remaining-elts))))))))

(define (element-of-set? x set)
  (cond ((null? set) false)
        ((= x (entry set)) true)
        ((< x (entry set))
         (element-of-set? x (left-branch set)))
        ((> x (entry set))
         (element-of-set? x (right-branch set)))))

(define (adjoin-set x set)
  (cond ((null? set) (make-tree x '() '()))
        ((= x (entry set)) set)
        ((< x (entry set))
         (make-tree (entry set)
                    (adjoin-set x (left-branch set))
                    (right-branch set)))
        ((> x (entry set))
         (make-tree (entry set)
                    (left-branch set)
                    (adjoin-set x (right-branch set))))))
#|
(define (union-set set1 set2)
  (cond ((null? set2) set1)
        ((null? set1) set2)
        ((= (entry set2) (entry set1))
         (make-tree (entry set1)
                    (union-set (left-branch set1)
                               (left-branch set2))
                    (union-set (right-branch set1)
                               (right-branch set2))))
        ((< (entry set2) (entry set1))
         (union-set (make-tree (entry set1)
                               (union-set (left-branch set1)
                                          (make-tree (entry set2) (left-branch set2) '()))
                               (right-branch set1))
                    (right-branch set2)))
        ((> (entry set2) (entry set1))
         (union-set (make-tree (entry set1)
                               (left-branch set1)
                               (union-set (right-branch set1)
                                          (make-tree (entry set2) '() (right-branch set2))))
                    (left-branch set2)))))

|#

; OK... in order to use the ordered list...
(define (union-list list1 list2)
  (cond ((null? list1) list2)
        ((null? list2) list1)
        (else (let ((x1 (car list1)) (x2 (car list2)))
                (cond ((= x1 x2)
                       (cons x1 (union-list (cdr list1) (cdr list2))))
                      ((< x1 x2)
                       (cons x1 (union-list (cdr list1) list2)))
                      ((> x1 x2)
                       (cons x2 (union-list list1 (cdr list2)))))))))

(define (union-set set1 set2)
  (let ((list1 (tree->list set1))
        (list2 (tree->list set2)))
    (list->tree (union-list list1 list2))))

(define (intersect-list list1 list2)
  (if (or (null? list1) (null? list2))
      '()
      (let ((x1 (car list1)) (x2 (car list2)))
        (cond ((= x1 x2)
               (cons x1
                     (intersect-list (cdr list1) (cdr list2))))
              ((< x1 x2)
               (intersect-list (cdr list1) list2))
              ((> x1 x2)
               (intersect-list list1 (cdr list2)))))))

(define (intersection-set set1 set2)
  (let ((list1 (tree->list set1))
        (list2 (tree->list set2)))
    (list->tree (intersect-list list1 list2))))
  